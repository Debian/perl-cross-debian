<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY dhfirstname "Neil">
  <!ENTITY dhsurname   "Williams">
  <!ENTITY dhusername  "Neil Williams">
  <!ENTITY dhemail     "codehelp@debian.org">
  <!ENTITY dhsection   "1">
  <!ENTITY dhtitle     "perl-cross-debian User Manual">
  <!ENTITY dhucpackage "PERL-CROSS-DEBIAN">
  <!ENTITY dhpackage   "perl-cross-debian">
]>
<refentry>
  <refentryinfo>
    <title>&dhtitle;</title>
    <productname>&dhpackage;</productname>
    <authorgroup>
      <author>
       <firstname>&dhfirstname;</firstname>
        <surname>&dhsurname;</surname>
        <contrib>Wrote this manpage for the Debian system.</contrib>
        <address>
          <email>&dhemail;</email>
        </address>
      </author>
    </authorgroup>
    <copyright>
      <year>2012</year>
      <holder>&dhusername;</holder>
    </copyright>
    <legalnotice>
      <para>This manual page was written for the Debian system
        (and may be used by others).</para>
      <para>Permission is granted to copy, distribute and/or modify this
        document under the terms of the GNU General Public License,
        Version 2 or (at your option) any later version published by
        the Free Software Foundation.</para>
      <para>On Debian systems, the complete text of the GNU General Public
        License can be found in
        <filename>/usr/share/common-licenses/GPL</filename>.</para>
    </legalnotice>
  </refentryinfo>
  <refmeta>
    <refentrytitle>&dhucpackage;</refentrytitle>
    <manvolnum>&dhsection;</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>&dhpackage;</refname>
    <refpurpose>Long term maintenance of cross-build support for the Debian configuration of perl</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <cmdsynopsis>
      <command>&dhpackage;</command>
      <arg choice="opt"><option>--rootdir=<parameter>DIRECTORY</parameter></option></arg>
      <arg choice="plain"><option>--variant=<replaceable>STRING</replaceable></option></arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>&dhpackage;</command>
      <group choice="opt">
        <arg choice="plain">
          <group choice="req">
            <arg choice="plain"><option>-h</option></arg>
            <arg choice="plain"><option>--help</option></arg>
          </group>
        </arg>
        <arg choice="plain">
          <group choice="req">
            <arg choice="plain"><option>-v</option></arg>
            <arg choice="plain"><option>--version</option></arg>
          </group>
        </arg>
      </group>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1 id="description">
    <title>DESCRIPTION</title>
    <para><command>&dhpackage;</command> supports the long term maintenance
    of cross-build support for the Debian configuration of perl.</para>
    <para><command>&dhpackage;</command> copies pre-produced config files
    into the current perl build tree to prevent the build from needing to
    execute test binaries during the configuration stage by providing the
    values of the tests in advance. <command>&dhpackage;</command> then
    extracts values from the cached files to update the build information
    and package Makefiles.
    </para>
  </refsect1>
  <refsect1 id="command">
    <title>COMMAND</title>
    <variablelist>
      <varlistentry>
        <term><option>--variant <replaceable>VARIANT</replaceable></option></term>
        <listitem>
          <para>Name of the current perl build variant (static, debug or shared),
          passed in via debian/rules, must be specified once for each iteration.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  <refsect1 id="options">
    <title>OPTIONS</title>
    <variablelist>
      <varlistentry>
        <term><option>--rootdir <replaceable>DIRECTORY</replaceable></option></term>
        <listitem>
          <para>Debug support for testing with unreleased config files,
          uses the files from the rootdir instead of looking in the 
          <filename>/usr/share/perl-cross-debian/$(DEB_HOST_GNU_TYPE)/$(PERL_VERSION)</filename>
          directory. ($(PERL_VERSION) in this instance is the output of
          <command>/bin/bash debian/config.debian --full-version</command>.)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-?</option></term>
        <term><option>-h</option></term>
        <term><option>--help</option></term>
        <term><option>--version</option></term>
        <listitem>
          <para>Show summary of options and the version information.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  <refsect1 id="limitations">
  <title>Limitations</title>
  <para><command>&dhpackage;</command> implements a safeguard that the perl interpreter to be
  used during the cross-build is the same upstream version as the perl interpreter to be
  cross-built due to limitations of DynaLoader.pm :
  </para>
  <programlisting>
arm-linux-gnueabi-gcc -c   -D_REENTRANT -D_GNU_SOURCE -DDEBIAN -D_FORTIFY_SOURCE=2 -g -O2 -fstack-protector 
 --param=ssp-buffer-size=4 -Wformat -Werror=format-security -fno-strict-aliasing -pipe -I/usr/local/include 
 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -O2 -g   -DVERSION=\"3.39_02\" -DXS_VERSION=\"3.39_02\" 
 -fPIC "-I../.."   Cwd.c
Running Mkbootstrap for Cwd ()
DynaLoader object version 1.13 does not match $DynaLoader::VERSION 1.14 at ../../lib/DynaLoader.pm line 86.
Compilation failed in require at ../../lib/ExtUtils/Mkbootstrap.pm line 27.
  </programlisting>
  <para>Instead, <command>&dhpackage;</command> dies with a version mismatch and fails
  the cross-build. Ensure that the installed perl interpreter is upgraded before testing
  a cross-build of the updated perl source code (or use a chroot). When using a chroot
  and old-style dpkg-cross dependencies, consider preparing at least the zlib and bzip2
  dependencies outside the chroot as a new version of perl is frequently not installable
  with lots of perl modules such as those used by dpkg-cross. e.g. zlib1g-dev-armel-cross
  and libbz2-dev-armel-cross as well as libdb-dev-armel-cross and libgdbm-dev-armel-cross.
  </para>
  <programlisting>
sudo xapt -a armel -b zlib1g-dev libbz2-dev libdb-dev libgdbm-dev
  </programlisting>
  <para>The -cross packages are in /var/lib/xapt/output and need to be copied into the
  chroot and installed with <command>dpkg -i ./*</command>
  </para>
  <para><command>&dhpackage;</command> also implements a safeguard to prevent cross-builds
  when <command>DEB_BUILD_OPTIONS="nocheck"</command> has not been set prior to starting
  the build. Cross-build failures due to the running of test code within the perl build
  are not always easy to identify, so <command>&dhpackage;</command> checks for this
  build option and fails the cross-build if it is not set. (The check occurs inside
  <command>&dhpackage;</command> so the clean target will have been run before the check
  is made.)
  </para>
  </refsect1>
  <refsect1 id="cross">
    <title>Running the cross build</title>
    <para><command>&dhpackage;</command> needs some changes to the perl package before
    cross-building, so ensure that <filename>Makefile.SH</filename> and
    <filename>debian/rules</filename> are both patched and that the
    cross dependencies and cross compiler are installed.
    </para>
    <para><command>debuild</command> is preferred as this will provide a
    build log and run lintian (by default) which means that the built
    packages will be checked to ensure that the binaries have been correctly
    compiled for the cross architecture (amongst the normal checks).
    Run the cross build with:
    </para>
    <programlisting>
DEB_BUILD_OPTIONS="nocheck" debuild -aarmel -us -uc -d
    </programlisting>
    <para>Note the use of <emphasis>the -d option</emphasis> as dpkg cannot
    check cross-build dependencies until MutiArch -dev packages are in use.
    </para>
  </refsect1>
  <refsect1 id="clean">
    <title>Clean target support</title>
    <para><command>&dhpackage;</command> includes support for a custom clean
    target for cross-builds to ensure that version-specific content generated
    during the cross-build is cleaned up before dpkg-source tries to verify
    the source package. If there are additional files which need to be cleaned,
    file a bug against <command>&dhpackage;</command>.
    </para>
  </refsect1>
  <refsect1 id="install">
     <title>Extension installation</title>
     <para>The current method of building and installing the extensions
     does need testing and improvement. Whilst the main emphasis for a
     perl cross build is to support bootstrapping by having the normal perl
     interpreter available instead of just miniperl, there may be less
     emphasis on the correct functioning of the extensions and modules
     normally packaged by a native perl build. Problems relating to any
     use of perl extensions and modules when the cross built perl
     packages are installed should be reported as bugs in
     <command>&dhpackage;</command>.
     </para>
  </refsect1>
  <refsect1 id="extensions">
    <title>Extending perl-cross-debian</title>
    <para><command>&dhpackage;</command> provides some POD documentation of
    how to extend support to new architectures and how to update existing
    support for new versions of perl.
    </para>
    <para>See <filename>/usr/share/doc/perl-cross-debian/converting-native.pod</filename>
    and <filename>/usr/share/doc/perl-cross-debian/new-arch.pod</filename>
    </para>
  </refsect1>
</refentry>
